#include "pico/stdlib.h"

#include <math.h>

#include "../config.h"
#include "../functions.h"
#include "resources.h"

#define CLIP(x) if (x < -32767) x = -32767; if (x > 32767) x = 32767;
namespace FILTER {

    const uint16_t lut_svf_cutoff[] = {
        17,     18,     19,     20,
        22,     23,     24,     26,
        27,     29,     31,     33,
        35,     37,     39,     41,
        44,     46,     49,     52,
        55,     58,     62,     66,
        70,     74,     78,     83,
        88,     93,     99,    105,
        111,    117,    124,    132,
        140,    148,    157,    166,
        176,    187,    198,    210,
        222,    235,    249,    264,
        280,    297,    314,    333,
        353,    374,    396,    420,
        445,    471,    499,    529,
        561,    594,    629,    667,
        706,    748,    793,    840,
        890,    943,    999,   1059,
        1122,   1188,   1259,   1334,
        1413,   1497,   1586,   1681,
        1781,   1886,   1999,   2117,
        2243,   2377,   2518,   2668,
        2826,   2994,   3172,   3361,
        3560,   3772,   3996,   4233,
        4485,   4751,   5033,   5332,
        5648,   5983,   6337,   6713,
        7111,   7532,   7978,   8449,
        8949,   9477,  10037,  10628,
        11254,  11916,  12616,  13356,
        14138,  14964,  15837,  16758,
        17730,  18756,  19837,  20975,
        22174,  23435,  24761,  25078,
        25078,  25078,  25078,  25078,
        25078,  25078,  25078,  25078,
        25078,  25078,  25078,  25078,
        25078,  25078,  25078,  25078,
        25078,  25078,  25078,  25078,
        25078,  25078,  25078,  25078,
        25078,  25078,  25078,  25078,
        25078,  25078,  25078,  25078,
        25078,  25078,  25078,  25078,
        25078,  25078,  25078,  25078,
        25078,  25078,  25078,  25078,
        25078,  25078,  25078,  25078,
        25078,  25078,  25078,  25078,
        25078,  25078,  25078,  25078,
        25078,  25078,  25078,  25078,
        25078,  25078,  25078,  25078,
        25078,  25078,  25078,  25078,
        25078,  25078,  25078,  25078,
        25078,  25078,  25078,  25078,
        25078,  25078,  25078,  25078,
        25078,  25078,  25078,  25078,
        25078,  25078,  25078,  25078,
        25078,  25078,  25078,  25078,
        25078,  25078,  25078,  25078,
        25078,  25078,  25078,  25078,
        25078,  25078,  25078,  25078,
        25078,  25078,  25078,  25078,
        25078,  25078,  25078,  25078,
        25078,  25078,  25078,  25078,
        25078,  25078,  25078,  25078,
        25078,  25078,  25078,  25078,
        25078,  25078,  25078,  25078,
        25078,
    };
    const uint16_t lut_svf_damp[] = {
        65534,  49213,  46125,  44055,
        42453,  41129,  39991,  38988,
        38086,  37266,  36512,  35812,
        35158,  34544,  33965,  33416,
        32893,  32395,  31918,  31460,
        31021,  30597,  30188,  29793,
        29411,  29041,  28681,  28332,
        27992,  27661,  27339,  27024,
        26717,  26418,  26125,  25838,
        25558,  25283,  25014,  24750,
        24491,  24236,  23987,  23742,
        23501,  23264,  23031,  22802,
        22577,  22355,  22136,  21921,
        21708,  21499,  21293,  21089,
        20889,  20691,  20495,  20302,
        20112,  19924,  19738,  19555,
        19373,  19194,  19017,  18842,
        18668,  18497,  18327,  18160,
        17994,  17830,  17667,  17506,
        17347,  17189,  17033,  16878,
        16725,  16573,  16423,  16274,
        16126,  15980,  15834,  15691,
        15548,  15407,  15266,  15127,
        14989,  14853,  14717,  14582,
        14449,  14316,  14185,  14054,
        13925,  13796,  13669,  13542,
        13416,  13291,  13167,  13044,
        12922,  12801,  12680,  12561,
        12442,  12324,  12206,  12090,
        11974,  11859,  11744,  11631,
        11518,  11406,  11294,  11183,
        11073,  10964,  10855,  10747,
        10639,  10532,  10426,  10321,
        10215,  10111,  10007,   9904,
        9801,   9699,   9597,   9496,
        9396,   9296,   9196,   9097,
        8999,   8901,   8804,   8707,
        8610,   8514,   8419,   8324,
        8230,   8136,   8042,   7949,
        7856,   7764,   7672,   7581,
        7490,   7400,   7309,   7220,
        7131,   7042,   6953,   6865,
        6778,   6690,   6604,   6517,
        6431,   6345,   6260,   6175,
        6090,   6006,   5922,   5839,
        5755,   5673,   5590,   5508,
        5426,   5345,   5263,   5183,
        5102,   5022,   4942,   4862,
        4783,   4704,   4626,   4547,
        4469,   4391,   4314,   4237,
        4160,   4083,   4007,   3931,
        3855,   3780,   3705,   3630,
        3555,   3481,   3407,   3333,
        3259,   3186,   3113,   3040,
        2968,   2895,   2823,   2752,
        2680,   2609,   2538,   2467,
        2396,   2326,   2256,   2186,
        2116,   2047,   1978,   1909,
        1840,   1771,   1703,   1635,
        1567,   1500,   1432,   1365,
        1298,   1231,   1164,   1098,
        1032,    966,    900,    834,
        769,    704,    639,    574,
        510,    445,    381,    317,
        253,
    };
    
    enum FilterType {
        LowPass,
        BandPass,
        HighPass
    };

    namespace {

        bool dirty_;

        int16_t frequency_;
        int16_t resonance_;

        int32_t punch_;
        int32_t f_;
        int32_t damp_;

        int32_t lp_;
        int32_t bp_;

        int32_t lpOutput;
        int32_t bpOutput;
        int32_t hpOutput;

        int32_t feedback_ = 1;

        FilterType mode_;

        inline uint16_t Interpolate824(const uint16_t* table, uint32_t phase) {
            uint32_t a = table[phase >> 24];
            uint32_t b = table[(phase >> 24) + 1];
            return a + ((b - a) * static_cast<uint32_t>((phase >> 8) & 0xffff) >> 16);
        }

        inline int16_t Interpolate824(const uint8_t* table, uint32_t phase) {
            int32_t a = table[phase >> 24];
            int32_t b = table[(phase >> 24) + 1];
            return (a << 8) + \
                ((b - a) * static_cast<int32_t>(phase & 0xffffff) >> 16) - 32768;
        }
        
    }
    
    void init();
    void set_frequency(uint16_t frequency);
    void set_resonance(uint16_t resonance);
    void set_punch(uint16_t punch);
    void set_mode(FilterType mode);
    int32_t process(int32_t input);

    void trigger (void);
    void release (void);

    void modulate_cutoff(uint16_t cutoff);
    void modulate_resonance(uint16_t resonance);

}